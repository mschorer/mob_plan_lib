<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:ns="de.ms_ite.mobile.*"
		xmlns:ns1="de.ms_ite.mobile.topplan.components.*"
		width="100%" height="100%" creationComplete="initUI(event)" currentState="default" xmlns:ns2="de.ms_ite.mobile.topplan.selectors.*">
	<s:layout>
		<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	<fx:Declarations>
		<s:DateTimeFormatter id="fmt" dateTimePattern="yyyyMMdd_HHmmss" />
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="post"/>
		<s:State name="sign"/>
		<s:State name="subsign"/>
		<s:State name="label"/>
		<s:State name="info"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import de.ms_ite.mobile.topplan.AppSettings;
			
			import flash.data.SQLResult;
			
			import de.ms_ite.mobile.topplan.callouts.ImageCallout;
			import de.ms_ite.mobile.topplan.events.TopEvent;
			
			import models.Model;
			import models.RetrievalParameters;
			import models.SignsAction;
			import models.SignsIconMap;
			import models.SignsItem;
			import models.SignsModel;
			import models.SignsTagMap;
			import models.SignsUser;
			import models.StatusModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.XMLListCollection;
			import mx.controls.TextInput;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
//			import spark.skins.spark.TextInputSkin;
			
			protected static var _iconSizeLarge:int = 120;
			protected static var _iconSizeSmall:int = 60;

			private var dataSource:IDataInput;
			
			protected var _item:SignsItem;
			
			protected var _tagMapModel:SignsTagMap;
			protected var _tagMap:ArrayCollection;

			protected var _iconMapModel:SignsIconMap;
			protected var _iconMap:ArrayCollection;

			protected var _iconsReady:Boolean = false;
			protected var _tagsReady:Boolean = false;
			
			protected var _iconTagSaveQueue:Array = new Array();

			protected var _saveAction:SignsAction;					
			protected var _saveEvent:TopEvent;

			protected var tiName:spark.components.TextInput;
			protected var tiValue:spark.components.TextInput;
			protected var taDesc:spark.components.TextArea;
			
			protected function initUI( event:Event):void {
				debug( "initUI");
				
				presetControls();
				
				slOwner.addEventListener( Event.CHANGE, validateForm);
			}
			
			override public function set data( dest:Object):void {
				super.data = dest;
				debug( "set data ["+dest+"]");
				
				if ( true /*dest != _item*/) {
					if ( dest is SignsItem) _item = SignsItem( dest);
					else _item = new SignsItem( dest);
					
					_tagsReady = false;
					_iconsReady = false;
					
					presetDependent();

					if ( selDir != null) presetControls();
				}
				if ( slOwner != null) slOwner.switchState();
			}
			
			override public function get data():Object {
				return _item;
			}

			public function presetDependent():void {
				debug( "dependent ...");	// tags #["+_tagMap.length+"]");
				
				if ( _tagMapModel == null)  _tagMapModel = new SignsTagMap();
				if ( _tagMap == null) _tagMap = new ArrayCollection();
				
				_tagMap.removeAll();
				
				if ( _item.state != SignsModel.STATE_NEW) {
					
					var respTags:Responder = null;
					if ( Model.asyncMode) respTags = new Responder( asyncTags, _tagMapModel.defaultSqlErrorResponder);
					
					var rct:ArrayCollection = _tagMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id}), respTags);
					
					debug( "tags triggered");	// tags #["+_tagMap.length+"]");
					
					if ( rct != null) {
						_tagMap.addAll( rct);
						tagsReady();
					}
				} else _tagsReady = true;
				
				if ( _iconMapModel == null)  _iconMapModel = new SignsIconMap();
				if ( _iconMap == null) _iconMap = new ArrayCollection();
				
				_iconMap.removeAll();
				if ( _item.state != SignsModel.STATE_NEW) {
					
					var respIcons:Responder = null;
					if ( Model.asyncMode) respIcons = new Responder( asyncIcons, _tagMapModel.defaultSqlErrorResponder);
					
					var rci:ArrayCollection = _iconMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id}), respIcons);
					
					debug( "icons triggered");
					
					if ( rct != null) {
						_iconMap.addAll( rci);
						tagsReady();
					}
				} else _iconsReady = true;
				
				checkDependentReady();
			}
			
			protected function asyncTags( sqe:SQLResult): void {
				var rc:ArrayCollection = _tagMapModel.addResult( sqe, _tagMap);
				if ( slTags.tagMap != _tagMap) {
					slTags.tagMap = _tagMap;
				}
				
				if ( rc != null) tagsReady();
			}
			protected function tagsReady():void {
				debug( "tags #["+_tagMap.length+"]");	// tags #["+_tagMap.length+"]");
				_tagsReady = true;
				
				checkDependentReady();
			}
			
			protected function asyncIcons( sqe:SQLResult): void {
				var rc:ArrayCollection = _iconMapModel.addResult( sqe, _iconMap);
				
				if ( rc != null) iconsReady();
			}
			protected function iconsReady():void {
				debug( "icons #["+_iconMap.length+"]");	// tags #["+_tagMap.length+"]");
				_iconsReady = true;
				
				checkDependentReady();
			}
			
			protected function checkDependentReady():void {
				if ( _tagsReady && _iconsReady) {
					debug( "rdy: ["+_tagsReady+"]["+_iconsReady+"]");
					dispatchEvent( new TopEvent( TopEvent.ITEM_EDITOR_COMPLETE, true));
				}
			}
/*			
			protected function presetDependent():void {
				if ( _tagMapModel == null)  _tagMapModel = new SignsTagMap();
				if ( _tagMap == null) _tagMap = new ArrayCollection();
				
				_tagMap.removeAll();
				if ( _item.state != SignsModel.STATE_NEW) _tagMap.addAll( _tagMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id})));
				debug( "tags #["+_tagMap.length+"]");	// tags #["+_tagMap.length+"]");
				
				if ( _iconMapModel == null)  _iconMapModel = new SignsIconMap();
				if ( _iconMap == null) _iconMap = new ArrayCollection();

				_iconMap.removeAll();
				if ( _item.state != SignsModel.STATE_NEW) _iconMap.addAll( _iconMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id})));
				debug( "icons #["+_iconMap.length+"]");	// tags #["+_tagMap.length+"]");
			}
*/			
			protected function presetControls():void {
				
				if ( selType == null || _item == null) return;
				
				selType.value = _item.type;
				selPos.value = _item.position;
				selDir.value = _item.direction;
				
				selSort.sort = _item.sort;
				
				var type:String = _item.type.toString( 16);
				
				debug( "type ["+type+"]");
				
				dsLength.master = type;
				dsLength.value = _item.size;
				dsFormat.master = type;
				dsFormat.value = _item.format;
				dsConnection.master = type;
				dsConnection.value = _item.connection;

				if ( tiName != null) {
					vgName.removeElement( tiName);
					tiName = null;
				}
				if ( tiName == null) {
					tiName = new spark.components.TextInput();
					tiName.percentWidth = 100;
					vgName.addElement( tiName);
				}

				tiName.text = _item.name;
				tiName.invalidateDisplayList();
				
				if ( tiValue != null) {
					vgValue.removeElement( tiValue);
					tiValue = null;
				}
				if ( tiValue == null) {
					tiValue = new spark.components.TextInput();
					tiValue.percentWidth = 100;
					vgValue.addElement( tiValue);
				}

				tiValue.text = _item.value;
				
				if ( taDesc != null) {
					detailFlap.removeElement( taDesc);
					taDesc = null;
				}
				if ( taDesc == null) {
					taDesc = new spark.components.TextArea();
					taDesc.percentHeight = 100;
					taDesc.percentWidth = 100;
					taDesc.minHeight = 60;
					taDesc.heightInLines = 3;
					
					detailFlap.addElementAt( taDesc, 0);
				}
				taDesc.text = _item.description;
/*
				tiValue.setFocus();
				taDescription.setFocus();
				tiName.setFocus();
*/
				var dEn:Boolean = (_item.description != null && _item.description.length > 0);
				showDetails( dEn);

				slOwner.owner_id = _item.owner_id;
				slOwner.cache_owner_id = _item.cache_owner_id;
//				slOwner.locationId = _item.location_id;
				
				slTags.item = _item;
				
//				slIcons.item = _item;
//				selIcons.item = _item;
				
				iLarge.item = _item;
				
				iA1.item = _item;
				iA2.item = _item;
				iA3.item = _item;
				iA4.item = _item;
				
				iB1.item = _item;
				iB2.item = _item;

				iArrow.item = _item;

/*
				iconSelector.item = _item;
				iconSelector.value = _iconMap;
*/				
				typeChanged( null);
/*				
				var mode:String = selType.renderMode;
				debug( "type ["+type+"] ["+mode+"]");
				currentState = mode;
*/				
				validateForm();
			}
			
			public function doDelete( evt:Event):void {
			}
			
			public function doSave( createMode:Boolean):void {
				
				_item.owner_id = slOwner.owner_id;
				_item.cache_owner_id = slOwner.cache_owner_id;
				_item.type = selType.value;	//parseInt( slType.selectedItem.@data.toString());

				_item.sort = selSort.sort;

				_item.direction = selDir.value;
				_item.position = selPos.value;
				_item.connection = dsConnection.value;
				_item.size = dsLength.value;
				_item.format = dsFormat.value;
				
				_item.name = tiName.text;
				_item.value = tiValue.text;
				_item.description = taDesc.text;
				//					_data.location = lLocation.text;
				
//				var icons:ArrayCollection = iconSelector.value;
				
				debug( "save ["+(createMode ? 'CREATE' : 'ADD')+"] ["+_item.toString()+"]");
				
//				_item.callService( 'saveItem', itemSaved, faultHandler);

				if ( AppSettings.online) {
					_item.callService( 'save', itemSaved, faultHandler);
				} else {

					var desc:String = "save";
					if ( _item.state == SignsModel.STATE_NEW) {
						_saveEvent = new TopEvent( TopEvent.ITEM_ADD);
						_saveAction = new SignsAction( { item_id:_item.id, cache_item_id:_item.cache_id, type:( createMode ? AppSettings.ACTION_CREATE : AppSettings.ACTION_ADD), status:AppSettings.STATUS_OK, url:null, cache_url:null, name:_item.name, description:desc});
					} else {
						_saveEvent = new TopEvent( TopEvent.ITEM_SAVED);
						_saveAction = new SignsAction( { item_id:_item.id, cache_item_id:_item.cache_id, type:AppSettings.ACTION_EDIT, status:AppSettings.STATUS_NOP, url:null, cache_url:null, name:_item.name, description:desc});
					}
/*
					if ( _item.id < 0 && _item.cache_id < 0) chg = new TopEvent( TopEvent.ITEM_ADD);
					else chg = new TopEvent( TopEvent.ITEM_SAVED);
*/
					_item.cache_modified = new Date();

					var resp:Responder = null;
					if ( Model.asyncMode) {
						resp = new Responder( itemSavedAsync, _item.defaultSqlErrorResponder);
					}
					
					debug( "saving item ["+_item+"]");
					
					_item.save( resp);
					
					if ( ! Model.asyncMode) itemSaveConnected( _saveEvent, _saveAction);
				}
			}
				
			protected function itemSavedAsync( sqe:SQLResult):void {
				var b:Boolean = _item.saveResult( sqe);
				debug( "  save async done.");
				itemSaveConnected( _saveEvent, _saveAction);
			}
			
			protected function itemSaveConnected( chg:TopEvent, action:SignsAction):void {
				debug( "saved item ["+_item+"]");
				
				var msg:String = commitIconMap();
				
				chg.description = msg;
				
				var desc:String = _item.toString();
				if ( msg.length > 0) desc += "\n"+msg;

				action.description = desc;

				action.item_id = _item.id;
				action.cache_item_id = _item.cache_id;
				
				logItemAction( action);
				
				dispatchEvent( chg);
			}
			
			protected function commitIconMap():String {		// _iconMap2:ArrayCollection, item:SignsItem):String {
				
				var msg:String = "commit icons for ["+_item.cache_id+"] ";
				
				//				if ( _item.cache_id >= 0 && icSelect != null && _item_icons.length > 0) msg = "\n"+icSelect.commitMap();
				
				for( var i:int=0; i < _iconMap.length; i++) {
					var im:SignsIconMap = _iconMap.getItemAt( i) as SignsIconMap;
					
					if ( im.state == SignsModel.STATE_NEW) {
						msg += "new";
					} else {
						if ( im.deleted) {
							msg += "off";
						} else {
							msg += "on";
						}
						
						im.cache_modified = new Date();						
					}
					msg += "[@"+im.sort+" #"+im.cache_icon_id+"] ";
					
					debug( "  update icon ["+im.icon_id+"/"+_item.id+"] ["+im.cache_item_id+"/"+_item.cache_id+"]");
					
					if ( im.item_id <= 0) im.item_id = _item.id;
					if ( im.cache_item_id <= 0) im.cache_item_id = _item.cache_id;
					
					if ( Model.asyncMode) {
						if ( _iconTagSaveQueue.length == 0) {
							var resp:Responder = new Responder( unqueueIconTags, _item.defaultSqlErrorResponder);
							im.save( resp);
						}
						_iconTagSaveQueue.push( im);
					} else {
						im.save();						
					}
				}
				
				debug( msg);
				
				return msg;
			}
			
			protected function unqueueIconTags( sqe:SQLResult):void {
				var im:SignsIconMap = _iconTagSaveQueue.shift() as SignsIconMap;
				im.saveResult( sqe);
				
				if ( _iconTagSaveQueue.length > 0) {
					im = _iconTagSaveQueue[0] as SignsIconMap;
					var resp:Responder = new Responder( unqueueIconTags, _item.defaultSqlErrorResponder);
					im.save( resp);
					debug( "  save "+im.toString());
				} else {
					debug( "done.");
				}
			}
			
			public function validateForm( event:Event=null):void {
				var valid:Boolean = true;	//( slOwner.cache_owner_id > 0);
				
				debug( "validate ["+valid+"]");
				dispatchEvent( new TopEvent( valid ? TopEvent.VALIDATION_OK : TopEvent.VALIDATION_FAIL));
			}
			
			protected function itemSaved( evt:ResultEvent, token:Object=null):void {
				
				var res:Array = evt.result as Array;
				var status:StatusModel = new StatusModel( res[0]);
				
				var chg:TopEvent;
				if ( _item.id < 0) {
					_item.id = status.id;
					
					chg = new TopEvent( TopEvent.ITEM_ADD);
				} else {
					chg = new TopEvent( TopEvent.ITEM_SAVED);
				}
				_item.modified = status.modified;
				
				debug( "saved item ["+chg.type+"] "+status);
				
				dispatchEvent( chg);
			}
			
			//===========================================================================================================
			
			protected function typeChanged(event:Event):void {
				// TODO Auto-generated method stub
				
				var type:String = selType.value.toString( 16);
				var mode:String = selType.renderMode;
				
				debug( "type ["+type+"] ["+mode+"]");
				
				currentState = mode;
				
				dsLength.master = type;
				dsFormat.master = type;
				dsConnection.master = type;

				var parT:String = type.substr(0, 2);
				
				switch( parT) {
					// pfosten
					case '10':
					break;
					
					// schild
					case '20':
						iA1.filterType = 0x60;
						iA2.filterType = 0x60;
						iA3.filterType = 0x60;
						iA4.filterType = 0x60;
						
					break;
					
					// label
					case '28':
						iA1.filterType = 0x0;
						iA2.filterType = 0x0;
						iA3.filterType = 0x0;
						iA4.filterType = 0x0;
						
					break;
					
					default:
				}
				
				iLarge.filterType = 0x05;

				iB1.filterType = 0x20;
				iB2.filterType = 0x20;
				
				iArrow.filterType = 0x40;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			//===========================================================================================================
			
			public function logItemAction( action:SignsAction):void {
				
				var tu:SignsUser = AppSettings.getUser();
				action.user_id = tu.id;
				action.cache_user_id = tu.cache_id;
				
				action.cache_project_id = AppSettings.currentProject.cache_id;
				action.project_id = AppSettings.currentProject.id;
				
				debug( "log action["+action.item_id+"] ["+action.toString()+"]");
				
				if ( AppSettings.online) {
					action.callService( 'save', actionSaved, faultHandler);
				} else {
					action.cache_modified = new Date();
					action.save();
					
					debug( "saved item action ["+action+"]");
				}
			}
			
			protected function actionSaved( evt:ResultEvent, token:Object=null):void {
				
				var res:Array = evt.result as Array;
				var item:StatusModel = new StatusModel( res[0]);
				/*				
				var chg:PoiEvent;
				if ( _item.id < 0) {
				_item.id = parseInt( item.id);
				
				chg = new PoiEvent( PoiEvent.ITEM_ADD);
				} else {
				chg = new PoiEvent( PoiEvent.ITEM_SAVED);
				}
				_item.modified = item.modified;
				*/			
				debug( "saved item action remote ["+item+"]");
				//				dispatchEvent( chg);
			}
			
			private function faultHandler( fault:FaultEvent, token:Object=null):void {
				debug( "err: "+fault);
				debug( "code:\n" + fault.fault.faultCode + "\n\nMessage:\n" + fault.fault.faultString + "\n\nDetail:\n" + fault.fault.faultDetail);
				
				dispatchEvent( new TopEvent( TopEvent.ITEM_SAVE_ERROR));
			}
			
			//===========================================================================================================
			
			protected function debug( s:String):void {
//				trace( this.className+": "+s);
			}			
			
			protected function toggleDetails( evt:Event):void {
				showDetails( tsDesc.selected);
			}
			
			protected function showDetails( vis:Boolean):void {
				tsDesc.selected = detailFlap.visible = detailFlap.includeInLayout = vis;
			}
			
		]]>
	</fx:Script>
	<s:layout.default>
		<s:BasicLayout/>
	</s:layout.default>
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off"><!-- minWidth.default="700" -->
		<s:Group width.info="100%" height.info="100%"
				 width.label="100%" height.label="100%"
				 width.post="100%" height.post="100%"
				 width.sign="100%" height.sign="100%"
				 width.subsign="100%" height.subsign="100%">
			<s:layout>
				<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
			</s:layout>
			<s:Spacer width="100%" height="5"/>
			<s:HGroup width="100%">
				<ns2:ItemSortSelect id="selSort"/>
				<ns2:ItemTypeSelector id="selType" width="100%" change="typeChanged(event)"/>
				<!--
									  minWidth.info="750"
									  minWidth.label="750"
									  minWidth.post="750"
									  minWidth.sign="750"
									  minWidth.subsign="750"/ -->
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="bottom">
					  <!-- minWidth.default="700" -->
				<ns2:DependentSelector id="dsConnection" minWidth="100"
									   data="{AppSettings.itemConnectionXML}"
									   width.default="25%"
									   visible.info="false" width.info="30%"
									   includeInLayout.info="false"
									   width.label="30%"
									   width.post="30%"
									   width.sign="30%"
									   width.subsign="30%"/>
				<ns2:DependentSelector id="dsLength" minWidth="100"
									   data="{AppSettings.itemLengthXML}"
									   width.default="25%"
									   visible.info="false" width.info="30%"
									   includeInLayout.info="false"
									   visible.label="false" width.label="30%"
									   includeInLayout.label="false"
									   width.post="30%"
									   visible.sign="false" width.sign="30%"
									   includeInLayout.sign="false"
									   visible.subsign="false" width.subsign="30%"
									   includeInLayout.subsign="false"/>
				<ns2:DependentSelector id="dsFormat" minWidth="100"
									   data="{AppSettings.itemFormatXML}"
									   width.default="25%"
									   visible.info="true" width.info="30%"
									   includeInLayout.info="true"
									   visible.label="false" width.label="30%"
									   includeInLayout.label="false"
									   width.post="30%"
									   width.sign="30%"
									   width.subsign="30%"/>
				<ns2:PositionSelector id="selPos"
									   height="100%"
									   visible.info="false" includeInLayout.info="false"
									   visible.label="false" includeInLayout.label="false"
									   visible.post="false" includeInLayout.post="false"
									   visible.subsign="false" includeInLayout.subsign="false"/>
				<ns2:DirectionSelector id="selDir"
									   height="100%"
									   visible.info="false" includeInLayout.info="false"
									   visible.label="false" includeInLayout.label="false"
									   visible.post="false" includeInLayout.post="false"
									   visible.subsign="false" includeInLayout.subsign="false"/>
			</s:HGroup>
			<s:Spacer width="100%" height="10"/>
			<s:HGroup width="100%"
					  paddingLeft="2" paddingRight="2" verticalAlign="middle">
				<ns1:IconDisplayTyped id="iLarge" 
									  width="{_iconSizeLarge}" height="{_iconSizeLarge}" iconMap="{_iconMap}"
									  linkType="{AppSettings.ICON_LINK_LARGE}"
									  visible.label="false" includeInLayout.label="false"
									  visible.post="false" includeInLayout.post="false"
									  visible.info="false" includeInLayout.info="false"/>
				<s:Group visible.post="false" includeInLayout.post="false"
						 visible.subsign="false" includeInLayout.subsign="false"
						 visible.info="false" includeInLayout.info="false">
					<s:layout>
						<s:TileLayout orientation="rows" requestedRowCount="2"
									  horizontalGap="4" requestedColumnCount.default="2"
									  verticalGap="4"/>
					</s:layout>
					<s:layout.label>
						<s:HorizontalLayout/>
					</s:layout.label>
					<ns1:IconDisplayTyped id="iA1" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A1}"/>
					<ns1:IconDisplayTyped id="iA2" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A2}"/>
					<ns1:IconDisplayTyped id="iA3" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A3}"/>
					<ns1:IconDisplayTyped id="iA4" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A4}"
										  visible.label="false" includeInLayout.label="false"/>
				</s:Group>
				<s:VGroup id="vgName" gap="0" paddingTop="4"
						  width.default="100%"
						  width.info="100%"
						  width.label="100%"
						  width.post="100%"
						  width.sign="100%"
						  width.subsign="100%">
					<s:Label id="lNameIn" text="Name:" text.label="Beschriftung:" styleName="inputLabel"/>
					<!-- s:TextInput id="tiName" width="100%"/ --><!--  skinClass="spark.skins.spark.TextInputSkin"/ -->
				</s:VGroup>
				<s:HGroup visible.post="false" includeInLayout.post="false"
						  visible.sign="false" includeInLayout.sign="false"
						  visible.subsign="false" includeInLayout.subsign="false"
						  visible.info="false" includeInLayout.info="false">
					<ns1:IconDisplayTyped id="iB1" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_B1}" filterType="{0x28}"/>
					<ns1:IconDisplayTyped id="iB2" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_B2}" filterType="{0x20}"/>				
				</s:HGroup>
				<s:VGroup id="vgValue" width="40%" gap="0" paddingTop="4"
						  visible.post="false" includeInLayout.post="false"
						  visible.subsign="false" includeInLayout.subsign="false">
					<s:Label id="lValueIn" text="Wert:" text.sign="Höhe üNN:" text.label="Entfernung:" styleName="inputLabel"/>
					<!-- s:TextInput id="tiValue" width="100%"/ --><!--  skinClass="spark.skins.spark.TextInputSkin"/ -->
				</s:VGroup>
				<ns1:IconDisplayTyped id="iArrow"
									  width="{_iconSizeLarge}" height="{_iconSizeLarge}" iconMap="{_iconMap}"
									  linkType="{AppSettings.ICON_LINK_ARROWTIP}" filterType="{0x40}"
									  visible.label="false" includeInLayout.label="false"
									  visible.post="false" includeInLayout.post="false"
									  visible.subsign="false" includeInLayout.subsign="false"
									  visible.info="false" includeInLayout.info="false"/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="Beschreibung:" styleName="inputLabel"/>
				<s:Spacer width="100%" height="100%"/>
				<s:ToggleSwitch id="tsDesc" change="toggleDetails(event)"/>
			</s:HGroup>
			<!-- ns1:ItemIconSelector3 id="iconSelector" height="120"
								   visible.info="false" includeInLayout.info="false"
								   visible.post="false" includeInLayout.post="false"/ -->
			<s:VGroup id="detailFlap" width="100%" gap="0" paddingTop="4">
				<!-- s:TextArea id="taDescription" width="100%" minHeight="60" heightInLines="3"/ -->
				<s:HGroup width="100%">
					<ns1:ItemOwnerSelect id="slOwner" width="100%"/>
					<ns1:ItemTagsSelect id="slTags" width="100%"/>
				</s:HGroup>
			</s:VGroup>		
			<!-- s:Spacer includeIn="info,label,post,sign,subsign" width="100%" height="5"/>
			<ns1:ItemIconsSelect id="slIcons" width="100%"
								 visible.info="false" includeInLayout.info="false"
								 visible.post="false" includeInLayout.post="false"/ -->
			<!-- ns1:IconsListDisplay id="selIcons" includeIn="info,label,post,sign,subsign" height="40"/ -->		
		</s:Group>
	</s:Scroller>	
</s:View>