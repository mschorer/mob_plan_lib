<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:ns="de.ms_ite.mobile.*"
				   xmlns:ns1="de.ms_ite.mobile.topplan.components.*"
				   xmlns:ns2="de.ms_ite.mobile.topplan.selectors.*"
				   width="100%" creationComplete="initUI(event)" currentState="default"
				   borderVisible="false" cornerRadius="4">
	<s:layout>
		<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
	</s:layout>
	<fx:Declarations>
		<s:DateTimeFormatter id="fmt" dateTimePattern="yyyyMMdd_HHmmss" />
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="post"/>
		<s:State name="sign"/>
		<s:State name="subsign"/>
		<s:State name="label"/>
		<s:State name="info"/>
		<s:State name="poi"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import de.ms_ite.mobile.topplan.AppSettings;
			import de.ms_ite.mobile.topplan.callouts.ImageCallout;
			import de.ms_ite.mobile.topplan.events.TopEvent;
			
			import flash.data.SQLResult;
			
			import models.Model;
			import models.RetrievalParameters;
			import models.SignsAction;
			import models.SignsIconMap;
			import models.SignsItem;
			import models.SignsModel;
			import models.SignsTagMap;
			import models.SignsUser;
			import models.StatusModel;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			
			protected static var _iconSizeLarge:int = 80;
			protected static var _iconSizeSmall:int = 40;
			
			private var dataSource:IDataInput;
			
			protected var _item:SignsItem;
			
			protected var _tagMapModel:SignsTagMap;
			protected var _tagMap:ArrayCollection = new ArrayCollection();
			
			protected var _iconMapModel:SignsIconMap;
			protected var _iconMap:ArrayCollection = new ArrayCollection();
			
//			protected var deferDone:Boolean = false;
			
			protected var _iconsReady:Boolean = false;
			protected var _tagsReady:Boolean = false;
			
			protected var postSetup:Boolean = true;
			
			protected var _saveEvt:TopEvent;
			protected var _saveAction:SignsAction;
			protected var _iconTagSaveQueue:Array = new Array();
			
			protected function initUI( event:Event):void {
				debug( "initUI");
				
//				presetControls();
				
				slOwner.addEventListener( Event.CHANGE, validateForm);
				
				if ( _item != null && postSetup) deferredSetup();
			}
			
			public function set item( dest:SignsItem):void {
				debug( "set data ["+dest+"] ["+((controls != null) ? 'Y' : 'N')+"]");
				
				_item = dest;

				if ( controls != null) {
					deferredSetup();
					postSetup = false;
				}
			}
			
			protected function deferredSetup():void {
				debug( "deferred");

				//				if ( deferDone) return;
//				deferDone = true;
				
//				presetDependent();
				
				if ( selDir != null) presetControls();
				if ( slOwner != null) slOwner.switchState();
			}
			
			public function get item():SignsItem {
				return _item;
			}
			
			public function presetDependent():void {
				debug( "dependent ...");	// tags #["+_tagMap.length+"]");

				if ( _tagMapModel == null)  _tagMapModel = new SignsTagMap();
				if ( _tagMap == null) _tagMap = new ArrayCollection();
				
				_tagMap.removeAll();

				if ( _item.state != SignsModel.STATE_NEW) {

					var respTags:Responder = null;
					if ( Model.asyncMode) respTags = new Responder( asyncTags, _tagMapModel.defaultSqlErrorResponder);
					
					var rct:ArrayCollection = _tagMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id}), respTags);
					
					debug( "tags triggered");	// tags #["+_tagMap.length+"]");

					if ( rct != null) {
						_tagMap.addAll( rct);
						tagsReady();
					}
				} else _tagsReady = true;
				
				if ( _iconMapModel == null)  _iconMapModel = new SignsIconMap();
				if ( _iconMap == null) _iconMap = new ArrayCollection();
				
				_iconMap.removeAll();
				if ( _item.state != SignsModel.STATE_NEW) {

					var respIcons:Responder = null;
					if ( Model.asyncMode) respIcons = new Responder( asyncIcons, _tagMapModel.defaultSqlErrorResponder);
					
					var rci:ArrayCollection = _iconMapModel.list( new RetrievalParameters( { cache_item_id:_item.cache_id}), respIcons);

					debug( "icons triggered");
					
					if ( rct != null) {
						_iconMap.addAll( rci);
						tagsReady();
					}
				} else _iconsReady = true;
				
				checkDependentReady();
			}
			
			protected function asyncTags( sqe:SQLResult): void {
				var rc:ArrayCollection = _tagMapModel.addResult( sqe, _tagMap);
				
				if ( rc != null) tagsReady();
			}
			protected function tagsReady():void {
				debug( "tags #["+_tagMap.length+"]");	// tags #["+_tagMap.length+"]");
				_tagsReady = true;

				checkDependentReady();
			}
			
			protected function asyncIcons( sqe:SQLResult): void {
				var rc:ArrayCollection = _iconMapModel.addResult( sqe, _iconMap);
				
				if ( rc != null) iconsReady();
			}
			protected function iconsReady():void {
				debug( "icons #["+_iconMap.length+"]");	// tags #["+_tagMap.length+"]");
				_iconsReady = true;

				checkDependentReady();
			}
			
			protected function checkDependentReady():void {
				if ( _tagsReady && _iconsReady) {
					debug( "rdy: ["+_tagsReady+"]["+_iconsReady+"]");
					dispatchEvent( new TopEvent( TopEvent.ITEM_EDITOR_COMPLETE, true));
				}
			}
			
			protected function presetControls():void {
				debug( "preset");
				
				if ( selType == null || _item == null) return;
				
				selType.value = _item.type;
				setStyle( 'backgroundColor', selType.colorCode);

				var type:String = _item.type.toString( 16);				
				
				var mode:String = selType.renderMode;
				currentState = mode;
				controls.visible = controls.includeInLayout = true;
				
				status = _item.status;

				debug( "type ["+type+"] ["+mode+"] ["+selType.colorCode.toString(16)+"]");

				selPos.value = _item.position;
				selDir.value = _item.direction;
				
				selSort.sort = _item.sort;
				
				dsLength.master = type;
				dsLength.value = _item.size;
				dsFormat.master = type;
				dsFormat.value = _item.format;
				dsConnection.master = type;
				dsConnection.value = _item.connection;
				
				tiName.text = _item.name;
				tiValue.text = _item.value;
				taDescription.text = _item.description;
				
				var dEn:Boolean = (_item.description != null && _item.description.length > 0);
				showDetails( dEn);
				
				slOwner.owner_id = _item.owner_id;
				slOwner.cache_owner_id = _item.cache_owner_id;
				//				slOwner.locationId = _item.location_id;
				
				slTags.item = _item;
				
				iLarge.item = _item;
				iA1.item = _item;
				iA2.item = _item;
				iA3.item = _item;
				iA4.item = _item;
				iB1.item = _item;
				iB2.item = _item;
				iArrow.item = _item;
				
				typeChanged( null);

				validateForm();
				
//				dispatchEvent( new TopEvent( TopEvent.EDITOR_UPDATED, true));
			}
			
			public function doDelete( evt:Event):void {
			}
			
			public function doSave( createMode:Boolean):void {
				
				_item.owner_id = slOwner.owner_id;
				_item.cache_owner_id = slOwner.cache_owner_id;
				_item.type = selType.value;	//parseInt( slType.selectedItem.@data.toString());
				
				_item.sort = selSort.sort;
				
				_item.direction = selDir.value;
				_item.position = selPos.value;
				_item.connection = dsConnection.value;
				_item.size = dsLength.value;
				_item.format = dsFormat.value;
				
				_item.name = tiName.text;
				_item.value = tiValue.text;
				_item.description = taDescription.text;
				//					_data.location = lLocation.text;
				
				//				var icons:ArrayCollection = iconSelector.value;
				
				debug( "save ["+(createMode ? 'CREATE' : 'ADD')+"] ["+_item.toString()+"]");
				
				//				_item.callService( 'saveItem', itemSaved, faultHandler);
				
				if ( AppSettings.online) {
					_item.callService( 'save', itemSaved, faultHandler);
				} else {
					var action:SignsAction;					
					var chg:TopEvent;
					
					if ( _item.state == SignsModel.STATE_NEW) {
						chg = new TopEvent( TopEvent.ITEM_ADD);
						action = new SignsAction( {	item_id:_item.id, cache_item_id:_item.cache_id, type:( createMode ? AppSettings.ACTION_CREATE : AppSettings.ACTION_ADD), status:AppSettings.STATUS_OK, url:null, cache_url:null, name:_item.name});
					} else {
						chg = new TopEvent( TopEvent.ITEM_SAVED);
						action = new SignsAction( {	item_id:_item.id, cache_item_id:_item.cache_id, type:AppSettings.ACTION_EDIT, status:AppSettings.STATUS_NOP, url:null, cache_url:null, name:_item.name});
					}
					/*
					if ( _item.id < 0 && _item.cache_id < 0) chg = new TopEvent( TopEvent.ITEM_ADD);
					else chg = new TopEvent( TopEvent.ITEM_SAVED);
					*/
					_item.cache_modified = new Date();
					
					var resp:Responder = null;
					if ( Model.asyncMode) {
						resp = new Responder( itemSavedAsync, _item.defaultSqlErrorResponder);
						_saveEvt = chg;
						_saveAction = action;
					}
					
					debug( "saving item ["+_item+"]");

					_item.save( resp);
					
					if ( ! Model.asyncMode) itemSaveConnected( chg, action);					
				}
			}
			
			protected function itemSavedAsync( sqe:SQLResult):void {
				var b:Boolean = _item.saveResult( sqe);
				
				itemSaveConnected( _saveEvt, _saveAction);
			}
			
			protected function itemSaveConnected( chg:TopEvent, action:SignsAction):void {
				
				debug( "saved item ["+_item+"]");

				var msg:String = commitIconMap();	// _iconMap, _item);
				
				chg.description = msg;
				
				var desc:String = _item.toString();
				if ( msg.length > 0) desc += "\n"+msg;
				
				action.description = desc;
				
				action.item_id = _item.id;
				action.cache_item_id = _item.cache_id;
				
				logItemAction( action);
				
				dispatchEvent( chg);
			}
			
			protected function commitIconMap():String {		// _iconMap2:ArrayCollection, item:SignsItem):String {
			
				var msg:String = "commit icons for ["+_item.cache_id+"] ";
				
				//				if ( _item.cache_id >= 0 && icSelect != null && _item_icons.length > 0) msg = "\n"+icSelect.commitMap();
				
				for( var i:int=0; i < _iconMap.length; i++) {
					var im:SignsIconMap = _iconMap.getItemAt( i) as SignsIconMap;
					
					if ( im.state == SignsModel.STATE_NEW) {
						msg += "new";
					} else {
						if ( im.deleted) {
							msg += "off";
						} else {
							msg += "on";
						}
						
						im.cache_modified = new Date();						
					}
					msg += "[@"+im.sort+" #"+im.cache_icon_id+"] ";
					
					debug( "  update icon ["+im.icon_id+"/"+_item.id+"] ["+im.cache_item_id+"/"+_item.cache_id+"]");
					
					if ( im.item_id <= 0) im.item_id = _item.id;
					if ( im.cache_item_id <= 0) im.cache_item_id = _item.cache_id;
					
					if ( Model.asyncMode) {
						if ( _iconTagSaveQueue.length == 0) {
							var resp:Responder = new Responder( unqueueIconTags, _item.defaultSqlErrorResponder);
							im.save( resp);
						}
						_iconTagSaveQueue.push( im);
					} else {
						im.save();						
					}
				}
				
				debug( msg);
				
				return msg;
			}
			
			protected function unqueueIconTags( sqe:SQLResult):void {
				var im:SignsIconMap = _iconTagSaveQueue.shift() as SignsIconMap;
				im.saveResult( sqe);
				
				if ( _iconTagSaveQueue.length > 0) {
					im = _iconTagSaveQueue[0] as SignsIconMap;
					var resp:Responder = new Responder( unqueueIconTags, _item.defaultSqlErrorResponder);
					im.save( resp);
					debug( "  save "+im.toString());
				} else {
					debug( "done.");
				}
			}
			
			public function validateForm( event:Event=null):void {
				var valid:Boolean = true;	//( slOwner.cache_owner_id > 0);
				
				debug( "validate ["+valid+"]");
				dispatchEvent( new TopEvent( valid ? TopEvent.VALIDATION_OK : TopEvent.VALIDATION_FAIL));
			}
			
			protected function itemSaved( evt:ResultEvent, token:Object=null):void {
				
				var res:Array = evt.result as Array;
				var status:StatusModel = new StatusModel( res[0]);
				
				var chg:TopEvent;
				if ( _item.id < 0) {
					_item.id = status.id;
					
					chg = new TopEvent( TopEvent.ITEM_ADD);
				} else {
					chg = new TopEvent( TopEvent.ITEM_SAVED);
				}
				_item.modified = status.modified;
				
				debug( "saved item ["+chg.type+"] "+status);
				
				dispatchEvent( chg);
			}
			
			//===========================================================================================================
			
			public function set status( s:int):void {
				lStatus.status = s;
			}
			
			protected function typeChanged(event:Event):void {
				// TODO Auto-generated method stub
				
				var type:String = selType.value.toString( 16);
				var mode:String = selType.renderMode;
				
				debug( "type ["+type+"] ["+mode+"]");
				
				currentState = mode;
				
				dsLength.master = type;
				dsFormat.master = type;
				dsConnection.master = type;

				var parT:String = type.substr(0, 2);
				
				switch( parT) {
					// pfosten
					case '10':
						break;
					
					// schild
					case '20':
						iA1.filterType = 0x60;
						iA2.filterType = 0x60;
						iA3.filterType = 0x60;
						iA4.filterType = 0x60;
						
						break;
					
					// label
					case '28':
						iA1.filterType = 0x0;
						iA2.filterType = 0x0;
						iA3.filterType = 0x0;
						iA4.filterType = 0x0;
						
						break;
					
					default:
				}
				
				iLarge.filterType = 0x05;
				
				iB1.filterType = 0x20;
				iB2.filterType = 0x20;
				
				iArrow.filterType = 0x40;
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			
			protected function toggleDetails( evt:Event):void {
				showDetails( tsDesc.selected);
			}
			
			protected function showDetails( vis:Boolean):void {
				tsDesc.selected = detailFlap.visible = detailFlap.includeInLayout = vis;
			}
			
			//===========================================================================================================
			
			public function logItemAction( action:SignsAction):void {
				
				var tu:SignsUser = AppSettings.getUser();
				action.user_id = tu.id;
				action.cache_user_id = tu.cache_id;
				
				action.cache_project_id = AppSettings.currentProject.cache_id;
				action.project_id = AppSettings.currentProject.id;
				
				debug( "log action item["+action.item_id+"] ["+action.toString()+"]");
				
				status = action.status;
				
				if ( AppSettings.online) {
					action.callService( 'save', actionSaved, faultHandler);
				} else {
					action.cache_modified = new Date();

					action.save();
					
					debug( "saved item action ["+action+"]");
				}
			}
			
			protected function actionSaved( evt:ResultEvent, token:Object=null):void {
				
				var res:Array = evt.result as Array;
				var item:StatusModel = new StatusModel( res[0]);
				/*				
				var chg:PoiEvent;
				if ( _item.id < 0) {
				_item.id = parseInt( item.id);
				
				chg = new PoiEvent( PoiEvent.ITEM_ADD);
				} else {
				chg = new PoiEvent( PoiEvent.ITEM_SAVED);
				}
				_item.modified = item.modified;
				*/			
				debug( "saved item action remote ["+item+"]");
				//				dispatchEvent( chg);
			}
			
			private function faultHandler( fault:FaultEvent, token:Object=null):void {
				debug( "err: "+fault);
				debug( "code:\n" + fault.fault.faultCode + "\n\nMessage:\n" + fault.fault.faultString + "\n\nDetail:\n" + fault.fault.faultDetail);
				
				dispatchEvent( new TopEvent( TopEvent.ITEM_SAVE_ERROR));
			}
			
			//===========================================================================================================
			
			protected function debug( s:String):void {
//				trace( this.name+": "+s);
			}			
			
			protected function setupData(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fx:Script>
	<s:Scroller width.default="100%" height.default="100%" horizontalScrollPolicy.default="off">
		<s:Group id="controls" width="100%" height="100%" minWidth="750">
			<s:layout>
				<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
			</s:layout>
			<s:HGroup width="100%">
				<ns2:ItemSortSelect id="selSort"/>
				<ns2:TypeSelector2 id="selType" width="100%" change="typeChanged(event)"
									  minWidth="750"/>
				<ns1:ItemStatus id="lStatus" width="40"/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="bottom"
					  minWidth.default="750">
				<ns2:DependentSelector id="dsConnection" name="Verbindung" width="30%" minWidth="100"
									   data="{AppSettings.itemConnectionXML}"
									   visible.poi="false" includeInLayout.poi="false"
									   visible.post="true" includeInLayout.post="true"
									   visible.info="false" includeInLayout.info="false"
									   visible.label="true" includeInLayout.label="true"
									   visible.sign="true" includeInLayout.sign="true"
									   visible.subsign="true" includeInLayout.subsign="true"/>
				<ns2:DependentSelector id="dsLength" name="Länge" width="30%" minWidth="100"
									   data="{AppSettings.itemLengthXML}"
									   visible.info="false" includeInLayout.info="false"
									   visible.poi="false" includeInLayout.poi="false"
									   visible.post="true" includeInLayout.post="true"
									   visible.label="false" includeInLayout.label="false"
									   visible.sign="false" includeInLayout.sign="false"
									   visible.subsign="false" includeInLayout.subsign="false"/>
				<ns2:DependentSelector id="dsFormat" name="Format" width="30%" minWidth="100"
									   data="{AppSettings.itemFormatXML}"
									   visible.info="true" includeInLayout.info="true"
									   visible.poi="true" includeInLayout.poi="true"
									   visible.post="true" includeInLayout.post="true"
									   visible.label="false" includeInLayout.label="false"
									   visible.sign="true" includeInLayout.sign="true"
									   visible.subsign="true" includeInLayout.subsign="true"/>
				<ns2:PositionSelector id="selPos" name="Ausrichtung"
									  height="100%"
									  visible.info="true" includeInLayout.info="true"
									  visible.poi="false" includeInLayout.poi="false"
									  visible.label="false" includeInLayout.label="false"
									  visible.post="false" includeInLayout.post="false"
									  visible.sign="true" includeInLayout.sign="true"
									  visible.subsign="false" includeInLayout.subsign="false"/>
				<ns2:DirectionSelector id="selDir" name="Richtung"
									   height="100%"
									   visible.info="false" includeInLayout.info="false"
									   visible.poi="false" includeInLayout.poi="false"
									   visible.label="false" includeInLayout.label="false"
									   visible.post="false" includeInLayout.post="false"
									   visible.sign="true" includeInLayout.sign="true"
									   visible.subsign="false" includeInLayout.subsign="false"/>
			</s:HGroup>
			<s:Spacer width="100%" height="5"/>
			<s:HGroup width="100%"
					  paddingLeft="2" paddingRight="2" verticalAlign="middle">
				<ns1:IconDisplayTyped id="iLarge" width="{_iconSizeLarge}" height="{_iconSizeLarge}"
									  iconMap="{_iconMap}"
									  linkType="{AppSettings.ICON_LINK_LARGE}"
									  filterType="{0x05}"
									  visible.label="false" includeInLayout.label="false"
									  visible.post="false" includeInLayout.post="false"
									  visible.poi="false" includeInLayout.poi="false"
									  visible.info="false" includeInLayout.info="false"/>
				<s:Group visible.post="false" includeInLayout.post="false"
						 visible.subsign="false" includeInLayout.subsign="false"
						 visible.poi="false" includeInLayout.poi="false"
						visible.info="false" includeInLayout.info="false">
					<s:layout>
						<s:TileLayout orientation="rows" requestedRowCount="2"
									  horizontalGap="4" requestedColumnCount.default="2"
									  verticalGap="4"/>
					</s:layout>
					<s:layout.label>
						<s:HorizontalLayout/>
					</s:layout.label>
					<ns1:IconDisplayTyped id="iA1" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A1}" filterType="{0x00}"/>
					<ns1:IconDisplayTyped id="iA2" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A2}" filterType="{0x00}"/>
					<ns1:IconDisplayTyped id="iA3" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A3}" filterType="{0x00}"/>
					<ns1:IconDisplayTyped id="iA4" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_A4}" filterType="{0x00}"
										  visible.label="false" includeInLayout.label="false"/>
				</s:Group>
				<s:VGroup width="100%" gap="0" paddingTop="4">
					<s:Label text="Name:" text.label="Beschriftung:" styleName="inputLabel"/>
					<s:TextInput id="tiName" width="100%"/>
				</s:VGroup>
				<s:HGroup visible.post="false" includeInLayout.post="false"
						  visible.sign="false" includeInLayout.sign="false"
						  visible.subsign="false" includeInLayout.subsign="false"
						  visible.poi="false" includeInLayout.poi="false"
						  visible.info="false" includeInLayout.info="false">
					<ns1:IconDisplayTyped id="iB1" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_B1}" filterType="{0x00}"/>
					<ns1:IconDisplayTyped id="iB2" width="{_iconSizeSmall}" height="{_iconSizeSmall}" iconMap="{_iconMap}" linkType="{AppSettings.ICON_LINK_B2}" filterType="{0x20}"/>				
				</s:HGroup>
				<s:VGroup width="40%" gap="0" paddingTop="4"
						  visible.post="false" includeInLayout.post="false"
						  visible.subsign="false" includeInLayout.subsign="false">
					<s:Label text="Wert:" text.sign="Höhe üNN:" text.label="Entfernung:" styleName="inputLabel"/>
					<s:TextInput id="tiValue" width="100%"/>
				</s:VGroup>
				<ns1:IconDisplayTyped id="iArrow" width="{_iconSizeLarge}" height="{_iconSizeLarge}"
									  iconMap="{_iconMap}" 
									  linkType="{AppSettings.ICON_LINK_ARROWTIP}" 
									  filterType="{0x50}"
									  visible.label="false" includeInLayout.label="false"
									  visible.post="false" includeInLayout.post="false"
									  visible.subsign="false" includeInLayout.subsign="false"
									  visible.poi="false" includeInLayout.poi="false"
									  visible.info="false" includeInLayout.info="false"/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="Beschreibung:" styleName="inputLabel"/>
				<s:Spacer width="100%" height="100%"/>
				<s:CheckBox id="tsDesc" change="toggleDetails(event)" label="Details"/>
				<!-- s:ToggleSwitch id="tsDesc" change="toggleDetails( event)"/ -->
			</s:HGroup>
			<!-- ns1:ItemIconSelector3 id="iconSelector" height="120"
			visible.info="false" includeInLayout.info="false"
			visible.post="false" includeInLayout.post="false"/ -->
			<s:VGroup id="detailFlap" width="100%" gap="0" paddingTop="4" visible="false" includeInLayout="false">
	
				<s:TextArea id="taDescription" styleName="listItemDescription" width="100%" minHeight="60" heightInLines="3"/>
				<s:HGroup width="100%">
					<ns1:ItemOwnerSelect id="slOwner" width="100%"/>
					<ns1:ItemTagsSelect id="slTags" tagMap="{_tagMap}" width="100%"/>
				</s:HGroup>
			</s:VGroup>
			<!-- s:Spacer includeIn="info,label,post,sign,subsign" width="100%" height="5"/>
			<ns1:ItemIconsSelect id="slIcons" width="100%"
			visible.info="false" includeInLayout.info="false"
			visible.post="false" includeInLayout.post="false"/ -->
			<!-- ns1:IconsListDisplay id="selIcons" includeIn="info,label,post,sign,subsign" height="40"/ -->		
		</s:Group>		
	</s:Scroller>
</s:BorderContainer>