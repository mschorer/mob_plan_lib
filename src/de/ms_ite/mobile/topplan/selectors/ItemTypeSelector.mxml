<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  creationComplete="initUI(event)" gap="0">
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import de.ms_ite.mobile.topplan.AppSettings;
			
			import flashx.textLayout.tlf_internal;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.events.FlexEvent;
			
			import spark.components.DropDownList;
			import spark.components.HGroup;
			import spark.components.Spinner;
			import spark.components.SpinnerList;
			import spark.components.SpinnerListContainer;
			import spark.components.supportClasses.ListBase;
			import spark.events.IndexChangeEvent;

			protected var _selectedNode:XML;
			protected var xmlTypes:XMLList = AppSettings.itemTypeXML;
			protected var nodata:XMLListCollection = new XMLListCollection( new XMLList( '<item name="---" data="-1"/>'));
			
			protected var slCategory:ListBase;
			protected var slType:ListBase;
			protected var slSubType:ListBase;

			protected var _typeId:int = -1;
			protected var _typeTag:String;
			protected var _uiMatches:Boolean = false;
			
			protected var selectLevels:ArrayCollection;
//			protected var selectLevels2:ArrayCollection;
			
			protected function initUI(event:FlexEvent):void {
				
//				buildControls();
				if ( ! _uiMatches) selectTopDown( xmlTypes);
			}
			
			override protected function createChildren():void {
				
				if ( AppSettings.isDesktop) {
					
					var hg:HGroup = new HGroup();
					hg.percentWidth = 100;

					slCategory = new DropDownList();
					slCategory.percentWidth = 33;
					slCategory.addEventListener( Event.CHANGE, selectionChanged);
					slCategory.setStyle( 'interactionMode', 'mouse');
					hg.addElement( slCategory);
					
					slType = new DropDownList();
					slType.percentWidth = 33;
					slType.addEventListener( Event.CHANGE, selectionChanged);
					slType.setStyle( 'interactionMode', 'mouse');
					hg.addElement( slType);

					slSubType = new DropDownList();
					slSubType.percentWidth = 33;
					slSubType.addEventListener( Event.CHANGE, selectionChanged);
					slSubType.setStyle( 'interactionMode', 'mouse');

					hg.addElement( slSubType);
					
					addElement( hg);
					
/*
					<s:HGroup id="hgType" includeInLayout="false" visible="false" includeInLayout.desktop="true" visible.desktop="true" width="100%">
						<s:DropDownList id="slCategory2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
						<s:DropDownList id="slType2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
						<s:DropDownList id="slSubType2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
					</s:HGroup>
*/
				} else {
					var dlc:SpinnerListContainer = new SpinnerListContainer();
					dlc.percentWidth = 100;
					dlc.height = 140;
					dlc.minWidth = 40;
					
					var slC:SpinnerList = new SpinnerList();
					slC.percentWidth = 33;
					slC.labelField = "@name";
					slC.addEventListener( Event.CHANGE, selectionChanged);
					slC.wrapElements = false;
					slCategory = slC;
					dlc.addElement( slCategory);
					
					var slT:SpinnerList = new SpinnerList();
					slT.percentWidth = 33;
					slT.labelField = "@name";
					slT.addEventListener( Event.CHANGE, selectionChanged);
					slT.wrapElements = false;
					slType = slT;
					dlc.addElement( slType);
					
					var slSub:SpinnerList = new SpinnerList();
					slSub.percentWidth = 33;
					slSub.labelField = "@name";
					slSub.addEventListener( Event.CHANGE, selectionChanged);
					slSub.wrapElements = false;
					slSubType = slSub;
					dlc.addElement( slSubType);
					
					addElement( dlc);
					
/*
					<s:SpinnerListContainer includeInLayout="false" visible="false" includeInLayout.mobile="true" visible.mobile="true" width="100%" height="140">
						<s:SpinnerList id="slCategory" width="100%" height="100%" change="selectionChanged( event);"
									   labelField="@name" wrapElements="false"/>
						<s:SpinnerList width="20" height="100%" enabled="false" labelField="name" selectedIndex="1">
							<s:ArrayList>
								<fx:Object name="-" data="-1"></fx:Object>
							</s:ArrayList>
						</s:SpinnerList>
						<s:SpinnerList id="slType" width="80%" height="100%" change="selectionChanged( event);" labelField="@name" wrapElements="false"/>
						<s:SpinnerList width="20" height="100%" enabled="false" labelField="name" selectedIndex="1">
							<s:ArrayList>
								<fx:Object name="-" data="-1"></fx:Object>
							</s:ArrayList>
						</s:SpinnerList>
						<s:SpinnerList id="slSubType" width="100%" height="100%" change="selectionChanged( event);" labelField="@name" wrapElements="false"/>
					</s:SpinnerListContainer>
*/
				}

				selectLevels = new ArrayCollection();
				selectLevels.addItem( slCategory);
				selectLevels.addItem( slType);
				selectLevels.addItem( slSubType);
				
				super.createChildren();
			}
/*
			protected function buildControls():void {
				
				if ( selectLevels != null) return;
				
				selectLevels = new ArrayCollection();
				selectLevels.addItem( slCategory);
				selectLevels.addItem( slType);
				selectLevels.addItem( slSubType);

				selectLevels2 = new ArrayCollection();
				selectLevels2.addItem( slCategory2);
				selectLevels2.addItem( slType2);
				selectLevels2.addItem( slSubType2);
			}
*/			
			public function get selectedItem():XML {
				return _selectedNode;
			}

			public function get renderMode():String {
				var renderMode:String = 'default';
				var nd:XML = _selectedNode;
				
				while( nd != null) {
					if ( "@render" in nd) {
						var data:int = parseInt( nd.@data);
						
						if ( data >= 0) {
							renderMode = nd.@render;
							break;
						}
					}
					nd = nd.parent();
				}
				
				return renderMode;
			}
			
			public function set value( type:int):void {
			
				_typeId = type;
				_typeTag = type.toString( 16).toLowerCase();
				_uiMatches = false;
				
				debug( "set type ["+_typeTag+"]");
				
				if ( slCategory == null /* && slCategory2 == null */) return;

				if ( slType is DropDownList) {
					slType.selectedIndex = -1;
					slSubType.selectedIndex = -1;
				}

//				buildControls();
				selectTopDown( xmlTypes, 0, _typeTag);
			}
			
			public function get value():int {
				var tp:int = -1;
				var i:int = selectLevels.length -1;
				
				while( tp <= 0 && i >= 0) {
					var selection:XML = XML( ListBase( selectLevels.getItemAt( i)).selectedItem); 
					
					var sval:int = parseInt( selection.@data.toString(), 16);
					if ( sval >= 0) tp = sval;
					i--;
				}
				
				debug( "get type ["+tp+":"+tp.toString(16).toLowerCase()+"]");
				
				return tp;
			}

			protected function selectionChanged( evt:IndexChangeEvent):void {
				var sel:ListBase;
//				var sel2:DropDownList;
				
//				if ( evt.target is SpinnerList) {
					for( var i:int = 0; i < selectLevels.length; i++) {
						sel = ListBase( selectLevels.getItemAt( i));
//						sel2 = DropDownList( selectLevels2.getItemAt( i));
	
						if ( evt.target == sel) {
							_selectedNode = sel.selectedItem;	//sel2.selectedItem = 
							
							debug( "  sel chg ["+i+"]: "+_selectedNode.@name);						
							selectTopDown( _selectedNode.*, i+1);
							break;
						}
					}
/*				} else {
					for( var i:int = 0; i < selectLevels2.length; i++) {
						sel = SpinnerList( selectLevels.getItemAt( i));
						sel2 = DropDownList( selectLevels2.getItemAt( i));
						
						if ( evt.target == sel2) {
							_selectedNode = sel.selectedItem = sel2.selectedItem;
							
							debug( "  sel chg ["+i+"]: "+_selectedNode.@name);						
							selectTopDown( _selectedNode.*, i+1);
							break;
						}
					}					
				}
*/				
				debug( "change");
				dispatchEvent( new Event( Event.CHANGE));
			}

			protected function selectTopDown( children:XMLList, level:int=0, data:String=null):void {
				
				if ( level >= selectLevels.length) return;
				
				var selector:ListBase = selectLevels.getItemAt( level) as ListBase;
//				var selector2:DropDownList = selectLevels2.getItemAt( level) as DropDownList;
				
				if ( level > 0 || ((selector == null) ? false : (selector.dataProvider == null))) {
					//|| ((selector2 == null) ? false : (selector2.dataProvider == null))) {
					var xdp:XMLListCollection = ( children != null && children.length() > 0) ? new XMLListCollection( children) : nodata;
					if ( selector != null) selector.dataProvider = xdp;
//					if ( selector2 != null) selector2.dataProvider = xdp;
				}
				
				var selNode:XML;	// = selector.selectedItem; 
				if ( data != null) {
					var match:String = data.substr( 0, 2+level*2);
					var xNode:XMLList = children.(attribute("data")==match);
					
					if ( xNode.length() > 0) {
						selNode = xNode[0];
						if ( selNode != null) {
							if ( selector != null) selector.selectedItem = selNode;
//							if ( selector2 != null) selector2.selectedItem = selNode;
							debug( "  sel["+level+"]: "+selNode.@name);
							
							if ( selNode.@data == data) _selectedNode = selNode;
						}
					}
				}
				
				if ( selNode == null) {
					selNode = children[0];
					selector.selectedItem = selNode;
				}
				
				debug( "set["+level+"] ["+XML(selector.selectedItem).@name+"]");
				
				if ( level+1 < selectLevels.length) selectTopDown((selNode != null) ? selNode.* : null, level+1, data);
				else _uiMatches = true;
			}

			protected function debug( s:String):void {
				//trace( this.className+": "+s);
			}			
			
		]]>
	</fx:Script>
	<s:Label paddingTop="4" text="Typ:" styleName="spinnerLabel"/>
	<!-- s:SpinnerListContainer includeInLayout="false" visible="false" includeInLayout.mobile="true" visible.mobile="true" width="100%" height="140">
		<s:SpinnerList id="slCategory" width="100%" height="100%" change="selectionChanged( event);"
					   labelField="@name" wrapElements="false"/>
		<s:SpinnerList width="20" height="100%" enabled="false" labelField="name" selectedIndex="1">
			<s:ArrayList>
				<fx:Object name="-" data="-1"></fx:Object>
			</s:ArrayList>
		</s:SpinnerList>
		<s:SpinnerList id="slType" width="80%" height="100%" change="selectionChanged( event);" labelField="@name" wrapElements="false"/>
		<s:SpinnerList width="20" height="100%" enabled="false" labelField="name" selectedIndex="1">
			<s:ArrayList>
				<fx:Object name="-" data="-1"></fx:Object>
			</s:ArrayList>
		</s:SpinnerList>
		<s:SpinnerList id="slSubType" width="100%" height="100%" change="selectionChanged( event);" labelField="@name" wrapElements="false"/>
	</s:SpinnerListContainer>
	<s:HGroup id="hgType" includeInLayout="false" visible="false" includeInLayout.desktop="true" visible.desktop="true" width="100%">
		<s:DropDownList id="slCategory2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
		<s:DropDownList id="slType2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
		<s:DropDownList id="slSubType2" interactionMode="mouse" width="100%" change="selectionChanged(event)" labelField="@name"/>
	</s:HGroup -->
</s:VGroup>