<?xml version="1.0" encoding="utf-8"?>
<s:Callout xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   xmlns:ns="de.ms_ite.mobile.topplan.components.*"
						   creationComplete="initUI(event)" close="handleClose( event);"
						   width="90%" height="90%">
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import de.ms_ite.mobile.topplan.AppSettings;
			import de.ms_ite.mobile.topplan.TagWrapper;
			import de.ms_ite.mobile.topplan.events.TopEvent;
			
			import models.RetrievalParameters;
			import models.SignsAction;
			import models.SignsIcon;
			import models.SignsIconMap;
			import models.SignsItem;
			import models.SignsUser;
			import models.StatusModel;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var FilterSettings:ArrayCollection = new ArrayCollection([
				{label:"Alle", data:-1},
				{label:"Piktos", data:0x00},
				{label:"Radpfeile", data:0x05},
				{label:"Steigung", data:0x20},
//				{label:"Spezial", data:0x28}, 
				{label:"Schwierigkeit", data:0x40},
				{label:"Rad", data:0x50},
				{label:"Wandern", data:0x60},
//				{label:"Regional", data:0x70},
//				{label:"Ãœberregional", data:0x80},
				{label:"Spezial", data:0x90}
			]);
			
			protected var _icons:ArrayCollection;
			protected var _listIcons:ArrayCollection;
			
			protected var _item:SignsItem;
			protected var _item_icons:ArrayCollection;
			
			protected var _filterType:int = -1;
			protected var _linkageType:int = 0;
			
			protected var _iconModel:SignsIcon;
			protected var _iconMapModel:SignsIconMap;
			
			protected var _tickedIndex:int = -1;
			protected var _selectedId:int = -1;
			protected var _selectedIcon:SignsIcon;
			
			protected function initUI(event:FlexEvent):void {

				debug( "create ["+_filterType+"/"+_linkageType+"]");

				_icons = AppSettings.iconList;
				
				_listIcons = new ArrayCollection();
				_listIcons.source = AppSettings.iconList.source.concat();
				
				lIcons.dataProvider = _listIcons;
					
				bbIcons.selectedIndex = 0;
				iconFilter = _filterType;
				
				_listIcons.filterFunction = filter;
//				applyFilter();

				if ( _item_icons != null) iconMap = _item_icons;

				if ( _selectedId >= 0) {
					_selectedIcon = findIcon( _selectedId);
					lIcons.selectedIndex = -1;
					lIcons.selectedItem = _selectedIcon;
					var sl:int = findVisibleIconIndex( _selectedId);
					lIcons.ensureIndexIsVisible( sl);
				}				
				
				callLater( updatePopUpPosition);
			}
/*			
			public function commit():String  {
				var msg:String = "icon ["+_linkageType+"] ";

				for( var i:int=0; i < _item_icons.length; i++) {
					var im:SignsIconMap = _item_icons.getItemAt( i) as SignsIconMap;
					
					if ( _linkageType != im.sort) continue;

					if ( im.cache_item_id < 0) {
						im.cache_item_id = _item.cache_id;
						if ( _item.id >= 0) im.item_id = _item.id;
						
//						msg += "!["+im.cache_item_id+" : "+im.item_id+"] ";
					}

					if ( _selectedIcon != null && _selectedIcon.cache_id == im.cache_icon_id) {
						msg += "neu["+im.sort+":"+im.cache_icon_id+"] ";
						
						im.deleted = false;
						im.save();
					} else {
						if ( im.deleted) {
							msg += "off["+im.sort+":"+im.cache_icon_id+"] ";
							im.save();
						} else {
							msg += "alt["+im.sort+":"+im.cache_icon_id+"] ";
							im.deleted = true;
							im.save();
						}
					}
				}
				
				debug( msg);
				
//				logIconChange( _item, msg);
				return msg;
			}
*/			
			protected function updateSelection():void {
				debug( "select ["+(( _selectedIcon != null) ? _selectedIcon.name : "---")+"]");
				
				var selection:SignsIcon = _selectedIcon;	//lIcons.selectedItem as SignsIcon;
				var mapItem:SignsIconMap;
				var isListed:Boolean = false;
				
				for( var i:int = 0; i < _item_icons.length; i++) {
					var mi:SignsIconMap = SignsIconMap( _item_icons.getItemAt( i));
					
					if ( _linkageType != mi.sort) continue;
					
					if ( selection != null && mi.cache_icon_id == selection.cache_id) {
						isListed = true;
						mapItem = mi;
						mi.deleted = false;
						debug( "  -> "+mi);
					} else {
						mi.deleted = true;
						debug( "  => "+mi);
					}
				}
				
				var msg:String = "";
				if ( mapItem == null && selection != null) {
					// new
					var tmi:SignsIconMap = new SignsIconMap();
					
					tmi.cache_item_id = _item.cache_id;
					if ( _item.id >= 0) tmi.item_id = _item.id;
					
					tmi.cache_icon_id = selection.cache_id;
					if ( selection.id >= 0) tmi.icon_id = selection.id;
					
					tmi.sort = _linkageType;
					tmi.cache_modified = new Date();
					
//					tmi.save();
					
					debug( "  +> "+tmi);

					_item_icons.addItem( tmi);					
				}
/*				
				for( i=0; i < _item_icons.length; i++) {
					var im:SignsIconMap = _item_icons.getItemAt( i) as SignsIconMap;
					
					if ( selection.cache_id == im.cache_icon_id) {
						msg += "*["+im.cache_icon_id+"]";
						
						im.deleted = false;
						im.save();
					} else {
						if ( im.deleted) {
							msg += "_["+im.cache_icon_id+"]";
						} else {
							msg += "-["+im.cache_icon_id+"]";
							im.deleted = true;
							im.save();
						}
					}
				}
				
				debug( msg);
				
				logIconChange( _item, msg);
*/
			}
			
			public function get iconMap():ArrayCollection {
				return _item_icons;
			}
			
			public function set iconMap( icons:ArrayCollection):void {

				if ( _item == null) return;
				if ( _iconMapModel == null) _iconMapModel = new SignsIconMap();
				
				_item_icons = icons;
				
				debug( "mark: ["+_linkageType+"] ["+_filterType+"] #"+_item_icons.length);

				var ticked:int = -1;
				for( var i:int = 0; i < _item_icons.length; i++) {
					var mapItem:SignsIconMap = SignsIconMap( _item_icons.getItemAt( i));
					
					if ( _linkageType != mapItem.sort) continue;

					if ( mapItem.deleted) {
						// 
						debug( "  - "+mapItem.cache_icon_id);
					} else {
						debug( "  + "+mapItem.cache_icon_id);
						_selectedId = mapItem.cache_icon_id;
						if ( lIcons != null) {
							ticked = _tickedIndex = findVisibleIconIndex( _selectedId);
							if ( _tickedIndex >= 0) {
								_selectedIcon = _listIcons.getItemAt( _tickedIndex) as SignsIcon;
								debug( "select ["+_selectedIcon.name+"]");
								
								callLater( updateListSelection);
							}
						}
					}
				}
				if ( ticked == -1 && lIcons != null) lIcons.selectedIndex = -1;
				
//				if ( _icons != null) _icons.refresh();
			}
			
			protected function updateListSelection():void {
				lIcons.selectedItem = _selectedIcon;
				if ( _tickedIndex >= 0) lIcons.ensureIndexIsVisible( _tickedIndex);
				debug( "update ["+((_selectedIcon != null) ? _selectedIcon.name : '---')+"]");
				
				updatePopUpPosition();
			}

			protected function changeSelection( evt:Event):void {
				if ( lIcons.selectedItem != null) _selectedIcon = lIcons.selectedItem;
				
				debug( "sel: ["+evt.type+"] ["+((lIcons.selectedItem != null) ? SignsIcon( lIcons.selectedItem).name : '---')+"]");

				if ( evt.type == Event.CHANGE) {
					saveChanges();
				}
			}
			
			protected function findVisibleIconIndex( iconId:int):int {
				for( var i:int = 0; i < _listIcons.length; i++) {
					if ( SignsIcon( _listIcons.getItemAt( i)).cache_id == iconId) return i;
				}
				
				return -1;
			}

			protected function findIcon( iconId:int):SignsIcon {
				for( var i:int = 0; i < _icons.length; i++) {
					if ( SignsIcon( _icons.getItemAt( i)).cache_id == iconId) return SignsIcon( _icons.getItemAt( i));
				}
				
				return null;
			}
/*			
			public function preset( om:SignsItem):void {
				if ( om != _itemModel) {
					_itemModel = om;
					presetIcons( om);
				}
			}
*/			
			public function set item( ow:SignsItem):void {
				_item = ow;
			}
			
			public function set linkType( linkType:int):void {
				_linkageType = linkType;
			}
			
			public function set iconFilter( type:int):void {
				_filterType = type;

				if ( bbIcons == null) return;
				
				for ( var i:int = 0; i < FilterSettings.length; i++) {
					var filt:Object = FilterSettings.getItemAt( i);
					
					if ( _filterType == parseInt( filt.data)) {
						bbIcons.selectedIndex = i;
						applyFilter();
						
						break;
					}
				}
			}
			
			public function get itemIcon():SignsIcon {
				return ( lIcons.selectedItem == null) ? null : SignsIcon( lIcons.selectedItem);
			}
			
			protected function handleClose( evt:Event):void {
				debug( "close");
				close( true);
			}
			
			protected function unmarkAll( evt:Event):void {
				lIcons.selectedIndex = -1;
				_selectedIcon = lIcons.selectedItem = null;
				
				saveChanges();
			}
			
			protected function saveChanges(event:Event=null):void {
				debug( "submit");
				updateSelection();
				close( true);
				callLater( sendComplete);
			}
			
			protected function sendComplete():void {
				dispatchEvent( new Event( Event.COMPLETE));
			}
			
			protected function applyFilter( evt:Event=null):void {
				var sl:int = -2;
				
				_listIcons.refresh();

				if ( _selectedIcon != null) {
					sl = findVisibleIconIndex( _selectedIcon.cache_id);
					if ( lIcons != null && sl >= 0) {
						lIcons.ensureIndexIsVisible( sl);
						lIcons.selectedItem = _selectedIcon;
					}
				}
				debug( "apply filter ["+(( evt != null) ? evt.type : '---')+"] ["+sl+"]");
			}
			
			protected function filter( obj:Object):Boolean {
				
				var fil:int = (bbIcons != null && bbIcons.selectedItem != null) ? ( bbIcons.selectedItem.data as int) : -1;
				
				if ( fil >= 0 && obj.type != fil) return false;
//				if ( fil < 0 && obj.type != 0) return false;
				
				if ( tiFilter == null || tiFilter.text == '' || tiFilter.text == '*') return true;
				
				var ow:SignsIcon = SignsIcon( obj);
				
				return ( ow.name.toLowerCase().indexOf( tiFilter.text.toLowerCase()) >= 0);
			}
			
			protected function logIconChange( item:SignsItem, msg:String):void {
				
				var action:SignsAction = new SignsAction( {	item_id:item.id, cache_item_id:item.cache_id, type:AppSettings.ACTION_EDIT, status:AppSettings.STATUS_NOP, name:'Change icons', description:msg});
				logItemAction( action);
			}
			
			//===========================================================================================================
			
			public function logItemAction( action:SignsAction):void {
				
				var tu:SignsUser = AppSettings.getUser();
				action.user_id = tu.id;
				action.cache_user_id = tu.cache_id;
				
				action.cache_project_id = AppSettings.currentProject.cache_id;
				action.project_id = AppSettings.currentProject.id;
				
				debug( "save item action ["+action.item_id+"] ["+action.toString()+"]");
				
				if ( AppSettings.online) {
					action.callService( 'save', actionSaved, faultHandler);
				} else {
					action.cache_modified = new Date();
					action.save();
					debug( "saved item action ["+action+"]");
				}
			}
			
			protected function actionSaved( evt:ResultEvent, token:Object=null):void {
				
				var res:Array = evt.result as Array;
				var item:StatusModel = new StatusModel( res[0]);

				debug( "saved item action remote ["+item+"]");
			}
			
			private function faultHandler( fault:FaultEvent, token:Object=null):void {
				debug( "err: "+fault);
				debug( "code:\n" + fault.fault.faultCode + "\n\nMessage:\n" + fault.fault.faultString + "\n\nDetail:\n" + fault.fault.faultDetail);
				
				dispatchEvent( new TopEvent( TopEvent.ITEM_SAVE_ERROR));
			}
			
			//===========================================================================================================

			protected function debug( txt:String):void {
				trace( this.className+": "+txt);
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2"
						  paddingTop="2"/>
	</s:layout>
	<s:HGroup width="100%" verticalAlign="middle" paddingTop="2" paddingLeft="2" paddingRight="2">
		<s:Label text="Filtern:"/>
		<s:TextInput id="tiFilter" width="100%" change="applyFilter( event)"/>
		<s:Spacer width="100%" height="100%"/>
		<s:Button id="bUnset" label="Entfernen" click="unmarkAll( event)"/>
		<s:Spacer width="10" height="100%"/>
		<s:Button id="bCancel" label="Cancel" emphasized="false" click="handleClose( event)"/>
		<s:Button id="bSave" label="Ok" emphasized="true" click="saveChanges( event)"/>
	</s:HGroup>
	<s:ButtonBar id="bbIcons" requireSelection="true" dataProvider="{FilterSettings}" change="applyFilter( event)"/>
	<s:BorderContainer width="100%" height="100%" backgroundColor="0xe0e0e0" borderColor="0"
					   borderWeight="1" contentBackgroundColor="0xe0e0e0" cornerRadius="5" horizontalCenter="0"
					   verticalCenter="0">
		<s:layout>
			<s:VerticalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2"/>
		</s:layout>
		<s:List id="lIcons" width="100%" height="100%" itemRenderer="de.ms_ite.mobile.topplan.renderer.IconRenderer"
				allowMultipleSelection="false" horizontalScrollPolicy="off" valueCommit="changeSelection( event);" change="changeSelection( event);">
			<s:layout>
				<s:TileLayout columnWidth="100" horizontalGap="1" orientation="rows"
							  requestedColumnCount="6" requestedRowCount="6" verticalGap="1"/>
			</s:layout>
		</s:List>
	</s:BorderContainer>
</s:Callout>